<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AoC on Sorting Random Bytes</title><link>https://blog.brunobuss.dev/tags/aoc/</link><description>Recent content in AoC on Sorting Random Bytes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.brunobuss.dev/tags/aoc/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2022 - Day 21 to 25 Retrospective</title><link>https://blog.brunobuss.dev/posts/2023/01/24/advent-of-code-2022-day-21-to-25-retrospective/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.brunobuss.dev/posts/2023/01/24/advent-of-code-2022-day-21-to-25-retrospective/</guid><description>As a reminder, you can find links to the previous parts at the end of this post and the Github repo with my solutions in Go here
Day 21 Day 21 was a clear and simple problem. The first part consisted basically on reading the input and building the in memory binary tree and computing the root node.
The second part was quite interesting! We had to compute the value of one of the leaf nodes (humn) such that the two children nodes of root would have the same value.</description></item><item><title>Advent of Code 2022 - Day 16 to 20 Retrospective</title><link>https://blog.brunobuss.dev/posts/2022/12/23/advent-of-code-2022-day-16-to-20-retrospective/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.brunobuss.dev/posts/2022/12/23/advent-of-code-2022-day-16-to-20-retrospective/</guid><description>As a reminder, you can find:
Part one with days 01 to 05 here Part two with days 06 to 10 here Part three with days 11 to 15 here Github repo with my solutions in Go here Day 16 This is a classic type of problem to be solved with Dynamic Programming or Backtrack with memoization (which are equivalent solutions).
Basically my state (either to index the memoization map or the DP matrix) was composed of how much time left, where the agent was and the state of the valves.</description></item><item><title>Advent of Code 2022 - Day 11 to 15 Retrospective</title><link>https://blog.brunobuss.dev/posts/2022/12/16/advent-of-code-2022-day-11-to-15-retrospective/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.brunobuss.dev/posts/2022/12/16/advent-of-code-2022-day-11-to-15-retrospective/</guid><description>As a reminder, you can find:
Part one with days 01 to 05 here Part two with days 06 to 10 here Github repo with my solutions in Go here Day 11 This challenge join two things that I usually don&amp;rsquo;t like very much:
VERY annoying input to read/parse. Non-sense simulation (unlike the one in day 10 :) In order to avoid having to deal with 1 I went ahead to solve the simulation first here.</description></item><item><title>Advent of Code 2022 - Day 06 to 10 Retrospective</title><link>https://blog.brunobuss.dev/posts/2022/12/11/advent-of-code-2022-day-06-to-10-retrospective/</link><pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.brunobuss.dev/posts/2022/12/11/advent-of-code-2022-day-06-to-10-retrospective/</guid><description>As a reminder, you can find:
Part one with days 01 to 05 here Github repo with my solutions in Go here Day 06 This was a nice one as the part two extended very easily from part one if you used a proper data structure, in this case avoing a hard coded comparisson of 4 values in the first part.
Another thing that I did was to keep it a linear scan while maintaining a map with the count of the characters in the window if k characters back.</description></item><item><title>Advent of Code 2022 - Day 01 to 05 Retrospective</title><link>https://blog.brunobuss.dev/posts/2022/12/07/advent-of-code-2022-day-01-to-05-retrospective/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.brunobuss.dev/posts/2022/12/07/advent-of-code-2022-day-01-to-05-retrospective/</guid><description>This is a small retrospective and some notes that I took while doing the Advent of Code 2022.
For this year I decided to use Go. Unlike last time where I went with Rust to learn the language (and had lots of fun doing it), I have used a bit of Go during my ~6 month rotation into GKE SRE while at Google. So even if I&amp;rsquo;m not totally new to the language, I&amp;rsquo;m definitely not used to write idiomatic Go anyway and I hope to improve this by the end of this year&amp;rsquo;s AoC :)</description></item></channel></rss>